// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSDateFormatter (SWIFT_EXTENSION(PiwikTracker))
@end


/// The Piwik Tracker is a Swift framework to send analytics to the Piwik server.
/// <h2>Basic Usage</h2>
/// <ul>
///   <li>
///     Configure the shared instance as early as possible in your application lifecyle.
///   </li>
///   <li>
///     Use the track methods to track your views, events and more.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12PiwikTracker12PiwikTracker")
@interface PiwikTracker : NSObject
/// Defines if the user opted out of tracking. When set to true, every event
/// will be discarded immediately. This property is persisted between app launches.
@property (nonatomic) BOOL isOptedOut;
/// Create and Configure a new Tracker
/// A volatile memory queue will be used to store the analytics data. All not transmitted data will be lost when the application gets terminated.
/// The URLSessionDispatcher will be used to transmit the data to the server.
/// \param siteId The unique site id generated by the server when a new site was created.
///
/// \param baseURL The url of the piwik server. This url has to end in <code>piwik.php</code>.
///
/// \param userAgent An optional parameter for custom user agent.
///
- (nonnull instancetype)initWithSiteId:(NSString * _Nonnull)siteId baseURL:(NSURL * _Nonnull)baseURL userAgent:(NSString * _Nullable)userAgent;
/// Manually start the dispatching process. You might want to call this method in AppDelegates <code>applicationDidEnterBackground</code> to transmit all data
/// whenever the user leaves the application.
- (void)dispatch;
@property (nonatomic) NSTimeInterval dispatchInterval;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface PiwikTracker (SWIFT_EXTENSION(PiwikTracker))
/// Starts a new Session
/// Use this function to manually start a new Session. A new Session will be automatically created only on app start.
/// You can use the AppDelegates <code>applicationWillEnterForeground</code> to start a new visit whenever the app enters foreground.
- (void)startNewSession;
@end

@class NSNumber;

@interface PiwikTracker (SWIFT_EXTENSION(PiwikTracker))
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number;
@end


@interface PiwikTracker (SWIFT_EXTENSION(PiwikTracker))
/// Set a permanent custom dimension.
/// Use this method to set a dimension that will be send with every event. This is best for Custom Dimensions in scope “Visit”. A typical example could be any device information or the version of the app the visitor is using.
/// For more information on custom dimensions visit https://piwik.org/docs/custom-dimensions/
/// \param value The value you want to set for this dimension.
///
/// \param index The index of the dimension. A dimension with this index must be setup in the piwik backend.
///
- (void)setWithValue:(NSString * _Nonnull)value forIndex:(NSInteger)index;
/// Removes a previously set custom dimension.
/// Use this method to remove a dimension that was set using the <code>set(value: String, forDimension index: Int)</code> method.
/// \param index The index of the dimension.
///
- (void)removeWithDimensionAtIndex:(NSInteger)index;
@end


@interface PiwikTracker (SWIFT_EXTENSION(PiwikTracker))
/// Tracks a screenview.
/// This method can be used to track hierarchical screen names, e.g. screen/settings/register. Use this to create a hierarchical and logical grouping of screen views in the Piwik web interface.
/// \param view An array of hierarchical screen names.
///
/// \param url The url of the page that was viewed. If none set the url will be http://example.com appended by the screen segments. Example: http://example.com/players/john-appleseed
///
- (void)trackWithView:(NSArray<NSString *> * _Nonnull)view url:(NSURL * _Nullable)url;
@end


@interface PiwikTracker (SWIFT_EXTENSION(PiwikTracker))
@end


@interface PiwikTracker (SWIFT_EXTENSION(PiwikTracker))
/// Returns the shared tracker. Will return nil if the tracker was not properly confured before.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PiwikTracker * _Nullable shared;)
+ (PiwikTracker * _Nullable)shared SWIFT_WARN_UNUSED_RESULT;
/// Configures the shared instance.
/// A volatile memory queue will be used to store the analytics data. All not transmitted data will be lost when the application gets terminated.
/// The URLSessionDispatcher will be used to transmit the data to the server.
/// \param siteId The unique site id generated by the server when a new site was created.
///
/// \param baseURL The url of the piwik server. This url has to end in <code>piwik.php</code>.
///
/// \param userAgent An optional parameter for custom user agent.
///
+ (void)configureSharedInstanceWithSiteID:(NSString * _Nonnull)siteID baseURL:(NSURL * _Nonnull)baseURL userAgent:(NSString * _Nullable)userAgent;
@end

#pragma clang diagnostic pop
